//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NF.Website.DirectorsReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectorDto", Namespace="http://schemas.datacontract.org/2004/07/NF.ApplicationServices.DTOs")]
    [System.SerializableAttribute()]
    public partial class DirectorDto : NF.Website.DirectorsReference.BaseDto {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectorInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectorInfo {
            get {
                return this.DirectorInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectorInfoField, value) != true)) {
                    this.DirectorInfoField = value;
                    this.RaisePropertyChanged("DirectorInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDto", Namespace="http://schemas.datacontract.org/2004/07/NF.ApplicationServices.DTOs")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NF.Website.DirectorsReference.DirectorDto))]
    public partial class BaseDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DirectorsReference.IDirectors")]
    public interface IDirectors {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/GetDirectors", ReplyAction="http://tempuri.org/IDirectors/GetDirectorsResponse")]
        NF.Website.DirectorsReference.DirectorDto[] GetDirectors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/GetDirectors", ReplyAction="http://tempuri.org/IDirectors/GetDirectorsResponse")]
        System.Threading.Tasks.Task<NF.Website.DirectorsReference.DirectorDto[]> GetDirectorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/GetDirectorsByName", ReplyAction="http://tempuri.org/IDirectors/GetDirectorsByNameResponse")]
        NF.Website.DirectorsReference.DirectorDto[] GetDirectorsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/GetDirectorsByName", ReplyAction="http://tempuri.org/IDirectors/GetDirectorsByNameResponse")]
        System.Threading.Tasks.Task<NF.Website.DirectorsReference.DirectorDto[]> GetDirectorsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/GetDirectorById", ReplyAction="http://tempuri.org/IDirectors/GetDirectorByIdResponse")]
        NF.Website.DirectorsReference.DirectorDto GetDirectorById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/GetDirectorById", ReplyAction="http://tempuri.org/IDirectors/GetDirectorByIdResponse")]
        System.Threading.Tasks.Task<NF.Website.DirectorsReference.DirectorDto> GetDirectorByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/PostDirector", ReplyAction="http://tempuri.org/IDirectors/PostDirectorResponse")]
        string PostDirector(NF.Website.DirectorsReference.DirectorDto directorDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/PostDirector", ReplyAction="http://tempuri.org/IDirectors/PostDirectorResponse")]
        System.Threading.Tasks.Task<string> PostDirectorAsync(NF.Website.DirectorsReference.DirectorDto directorDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/PutDirector", ReplyAction="http://tempuri.org/IDirectors/PutDirectorResponse")]
        string PutDirector(NF.Website.DirectorsReference.DirectorDto directorDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/PutDirector", ReplyAction="http://tempuri.org/IDirectors/PutDirectorResponse")]
        System.Threading.Tasks.Task<string> PutDirectorAsync(NF.Website.DirectorsReference.DirectorDto directorDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/DeleteDirector", ReplyAction="http://tempuri.org/IDirectors/DeleteDirectorResponse")]
        string DeleteDirector(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectors/DeleteDirector", ReplyAction="http://tempuri.org/IDirectors/DeleteDirectorResponse")]
        System.Threading.Tasks.Task<string> DeleteDirectorAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDirectorsChannel : NF.Website.DirectorsReference.IDirectors, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectorsClient : System.ServiceModel.ClientBase<NF.Website.DirectorsReference.IDirectors>, NF.Website.DirectorsReference.IDirectors {
        
        public DirectorsClient() {
        }
        
        public DirectorsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DirectorsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectorsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectorsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NF.Website.DirectorsReference.DirectorDto[] GetDirectors() {
            return base.Channel.GetDirectors();
        }
        
        public System.Threading.Tasks.Task<NF.Website.DirectorsReference.DirectorDto[]> GetDirectorsAsync() {
            return base.Channel.GetDirectorsAsync();
        }
        
        public NF.Website.DirectorsReference.DirectorDto[] GetDirectorsByName(string name) {
            return base.Channel.GetDirectorsByName(name);
        }
        
        public System.Threading.Tasks.Task<NF.Website.DirectorsReference.DirectorDto[]> GetDirectorsByNameAsync(string name) {
            return base.Channel.GetDirectorsByNameAsync(name);
        }
        
        public NF.Website.DirectorsReference.DirectorDto GetDirectorById(int id) {
            return base.Channel.GetDirectorById(id);
        }
        
        public System.Threading.Tasks.Task<NF.Website.DirectorsReference.DirectorDto> GetDirectorByIdAsync(int id) {
            return base.Channel.GetDirectorByIdAsync(id);
        }
        
        public string PostDirector(NF.Website.DirectorsReference.DirectorDto directorDto) {
            return base.Channel.PostDirector(directorDto);
        }
        
        public System.Threading.Tasks.Task<string> PostDirectorAsync(NF.Website.DirectorsReference.DirectorDto directorDto) {
            return base.Channel.PostDirectorAsync(directorDto);
        }
        
        public string PutDirector(NF.Website.DirectorsReference.DirectorDto directorDto) {
            return base.Channel.PutDirector(directorDto);
        }
        
        public System.Threading.Tasks.Task<string> PutDirectorAsync(NF.Website.DirectorsReference.DirectorDto directorDto) {
            return base.Channel.PutDirectorAsync(directorDto);
        }
        
        public string DeleteDirector(int id) {
            return base.Channel.DeleteDirector(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteDirectorAsync(int id) {
            return base.Channel.DeleteDirectorAsync(id);
        }
    }
}
